
M_CMD = 0
M_PROMPT = 1
M_HOTKEY = 2

back_option = ["back", "Back...", "b"]


def present_menu(menu_to_present, menu_system):
    """
    Displays a menu, gets user input and processes the input.
    If action text for the menu item chosen contains ':',
    the chars following it are taken as menu name and that menu is presented.
    If it does not contain ':', the action text from the menu is returned.
    :param menu_to_present: name of menu to show first, which is used as key of menu_system
    :param menu_system: menu_system dict object generated by generate_menu_system
    :return: Returns a tuple (action, menu_name) depending on the choice by the user.
    """
    menu = menu_system[menu_to_present]
    while menu is not None:
        display_menu(menu)
        act = get_menu_input(menu)
        if ":" in act:
            menu_name = act.split(":")[1]
            menu = menu_system[menu_name]
        else:
            menu_name = menu["name"]
            return act, menu_name


def display_menu(menu_dict):
    """
    Prints a menu, as described in menu_dict dictionary.
    :param menu_dict: dictionary with description of menu to be displayed
    :return: None
    """
    """
     Ex :
        scripts_menu = {
            "menu": "Manage Scripts Menu",
            "name": "scripts",
            "options": [
                ["list_scripts", "List Scripts", "l"],
                ["add_script", "Add Script", "a"]
            ],
            "back_option": True,
            "back_to": "main"
        }
    """
    print_banner(menu_dict["menu"])
    index = 1
    for i in menu_dict["options"]:
        print(f"{index}. {i[M_PROMPT]} ({i[M_HOTKEY]})")
        index += 1
    if menu_dict["back_option"]:
        print(f"{index}. {back_option[M_PROMPT]} "
              f"({back_option[M_HOTKEY]})")


def get_menu_input(menu):
    """
    Gets input from user, appropriate to the menu given
    :param menu: menu to get
    :return: Returns action appropriate to the choice
    """
    valid_chars = get_valid_hotkeys(menu)
    max_num = get_valid_choice_nums(menu)
    action = None

    while True:
        inp = input(f"Enter choice :")
        if not inp.isalnum():
            print("Invalid input.")
            continue
        if inp.isdigit():
            choice_num = int(inp)
            if 0 < choice_num <= max_num:
                action = get_menu_cmd_for_input(menu, choice_num)
                break
            else:
                print("Invalid number entered. ", end="")
        if inp.isalpha():
            inp = inp.strip()
            inp = inp.lower()
            if inp in valid_chars:
                action = get_menu_cmd_for_input(menu, inp)
                break
            else:
                print("Invalid character entered. ", end="")
    return action


def print_banner(header, star="*", width=25):
    """
    Prints a banner - Prints a heading sandwiched between two line of stars
    :param header: Text to show as banner header
    :param star: Decoration character to use as banner symbol. Default is *.
    :param width: Width of the banner
    :return: None
    """
    decoration = star * width
    print("\n"+decoration)
    print(header.center(width))
    print(decoration+"\n")


def get_valid_hotkeys(menu):
    """
    returns valid hot keys for a given menu
    :param menu: menu to process
    :return: list of valid hot keys
    """
    hotkeys = []
    for i in menu["options"]:
        hotkeys.append(i[M_HOTKEY])
    if menu["back_option"]:
        hotkeys.append(back_option[M_HOTKEY])
    return hotkeys


def get_valid_choice_nums(menu):
    """
    Get valid max numerical choice value for a menu.
    Ex: for a menu with 4 items and back option,
    valid choices are 1..5. Returns 5
    :param menu: menu to process
    :return: max valid number choice for menu
    """
    return len(menu["options"]) + (1 if menu["back_option"] else 0)


def get_menu_cmd_for_input(menu, inp):
    """
    Processes inp as menu choice.
    :param menu: menu against which to process inp as
    :param inp: input to check
    :return: action command applicable for the input
    """
    if type(inp) is str:
        if inp == back_option[M_HOTKEY] and menu["back_option"]:
            return "menu:" + menu["back_to"]
        for i in menu["options"]:
            if i[M_HOTKEY] == inp:
                return i[M_CMD]
    if type(inp) is int:
        options = menu["options"]
        if inp == len(options)+1 and menu["back_option"]:
            return "menu:"+menu["back_to"]
        return options[inp-1][M_CMD]
